// this is similar to unbounded knapsack
int min(int a, int b) {
    if (a < b)
        return a;
    else 
        return b;
}
int coinChange(int* coins, int coinsSize, int amount){
    int a[coinsSize+1][amount+1], i = 0, j = 0;
    if (coinsSize == 0 || amount == 0)
        return 0;
    for (i = 0; i < coinsSize+1; i++)  {
        for (j = 0; j< amount+1; j++) {
           
                a[i][j] = 0;
             if (i == 0) {
                a[i][j] = 0x7FFFFFFE;
            }
            
        }
    } 
    
   /* for (i = 0; i < coinsSize+1; i++)  {
        for (j = 0; j< amount+1; j++) {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }*/

    for( i=1;i<coinsSize+1;i++) {
        for (j=1; j<amount+1; j++) {
            if (coins[i-1] <= j) {
                a[i][j] = min (a[i-1][j], 
                              a[i][j - coins[i-1]] + 1);
            } else {
                a[i][j] = a[i-1][j];
            }
        }
    }
    if (a[coinsSize][amount] == 0x7FFFFFFE)
        return -1;
    return a[coinsSize][amount];
}
